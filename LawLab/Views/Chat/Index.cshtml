@model string

<section class="chat">
    <div class="form-wrapper">
        <div class="wrapper state-wrapper">
            <p>Соединение:</p>
            <p id="conState">Не установлено</p>
            <button id="connectButton" type="button" onclick="connect()">Подключение</button>
        </div>
        <div class="wrapper login-wrapper">
            <label for="name">Имя</label>
            <input id="name" type="text" placeholder="Anonymous">
            <div class="btn-wrapper">
                <button type="button" onclick="getName()">Получить</button>
                <button type="button" onclick="setName()">Установить</button>
            </div>
        </div>
        <div class="wrapper message-wrapper">
            <label for="wrapper message">Текст</label>
            <textarea id="message"></textarea>
            <button type="button" onclick="sendMessage()">Отправить</button>
        </div>
    </div>
    <div class="messages-wrapper">
        <div id="messages-content">

        </div>
    </div>

</section>

<style>
    p {
        margin-bottom: 0
    }

    .chat {
        display: flex;
        justify-content: space-between
    }

    .form-wrapper {
        width: 30%
    }

        .form-wrapper .wrapper {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            justify-content: space-between;
        }

    .login-wrapper, .message-wrapper {
        flex-wrap: wrap;
    }

    .btn-wrapper {
        width: 100%;
        padding-top: 15px;
    }

        .btn-wrapper button {
            float: right;
            width: 30%;
            justify-content: flex-end
        }

            .btn-wrapper button:last-child {
                margin-right: 10px
            }

    .message-wrapper {
        align-items: flex-start;
    }

        .message-wrapper label {
            margin-right: 15px;
            width: 10%;
        }

        .message-wrapper textarea {
            width: 80%;
        }

        .message-wrapper button {
            margin-left: auto;
            margin-top: 15px;
        }

    .messages-wrapper {
        width: 65%;
        display: block;
    }

        .messages-wrapper #messages-content {
            border: 1px solid #000;
            min-height: 500px;
        }
</style>

<script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
<script type="text/javascript">
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:5001/startconsult")
        .withAutomaticReconnect()
        .build();

    connection.on('Send', (message) => {
        appendMessage(message.sender, message.text, 'black');
    });

    connection.onclose(error => {
        console.log('Connection closed. ', error)
    });

    connection.onreconnecting(error => {
        console.log('Connection reconnecting. ', error);
    });

    connection.onreconnected(connectionId => {
        console.log('Connectin reconnected with id: ', connectionId);
    });

    function appendMessage(sender, message, color) {
        document.querySelector('#messages-content').insertAdjacentHTML("beforeend", `<div style="color:${color}"><p>Отправитель: ${sender}</p><p>Сообщение: ${message}</p></div><br>`);
    }

    async function connect() {
        if (connection.state === 'Disconnected') {
            try {
                await connection.start();
            }
            catch (error) {
                console.log(error);
            }
            if (connection.state === 'Connected') {

                @*let id = @Model;
                await connection.send('SetGroupId', id);*@
                //await setGroupId();
                //let message = { text: 'Hello' };
                await connection.send('NewChatSession');
                document.querySelector('#conState').textContent = 'Установлено';
                document.querySelector('#conState').style.color = 'green';
                document.querySelector('#connectButton').textContent = 'Разъединить';
                //let id = getGroupId();
                //appendMessage('Текущий пользователь', `Ваш групповой идентификатор: ${id}`, 'green');
            }
        } else if (connection.state === 'Connected') {
            await connection.stop();
            document.querySelector('#conState').textContent = 'Не установлено';
            document.querySelector('#conState').style.color = 'red';
            document.querySelector('#connectButton').textContent = 'Соединить';
        }
    };

    async function setGroupId() {
        let now = new Date();
        await connection.send('SetGroupId', (@Model + now));
    }

    async function getGroupId() {
        return await connection.invoke('GetGroupId');
    }

    async function sendMessage() {
        if (connection.state === 'Connected') {
            let textArea = document.querySelector('#message');
            let message = { text: textArea.value };
            let toStudent = await getId();
            let toClient = await getId();
            try {
                if (toStudent[0] === 's') {
                    await connection.send('Send', message, toClient);
                } else if (toClient[0] === 'c') {
                    await connection.send('Send', message, toStudent);
                }
                //appendMessage('Я', message.text, 'green');
            }
            catch (error) {
                console.log(error);
            }
            document.querySelector('#message').value = '';
        }
    }

    function getCookie(name) {
        let matches = document.cookie.match(new RegExp(
            "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
        ));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    }

    async function getId() {
        let id = await connection.invoke('SendIdentifier');
        return id;
    }

    //async function sendMessage() {
    //    if (connection.state === 'Connected') {
    //        let textArea = document.querySelector('#message');
    //        let message = { text: textArea.value };
    //        try {
    //            await connection.send('SendToOthers', message);
    //            appendMessage('Я', message.text, 'green');
    //        }
    //        catch (error) {
    //            console.log(error);
    //        }
    //        document.querySelector('#message').value = '';
    //    }
    //}

    async function getName() {
        if (connection.state === 'Connected') {
            try {
                let myName = await connection.invoke('GetName');
                document.querySelector('#name').value = myName;
            }
            catch (error) {
                console.log(error);
            }
        }
    }

    async function setName() {
        if (connection.state === 'Connected') {
            try {
                let name = document.querySelector('#name').value;
                await connection.send('SetName', name);
            }
            catch (error) {
                console.log(error);
            }
        }
    }
</script>