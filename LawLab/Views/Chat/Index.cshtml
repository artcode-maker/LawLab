@using System.Web
@{ Dictionary<string, object> dic = ViewBag.Dictionary as Dictionary<string, object>; }

<section class="chat">
    <div class="form-wrapper">
        <div class="wrapper state-wrapper">
            <p>Соединение:</p>
            <p id="conState">Не установлено</p>
            <button id="connectButton" type="button" onclick="connect()">Подключение</button>
        </div>
        <div class="wrapper login-wrapper">
            <label for="name">Имя</label>
            <input id="name" type="text" placeholder="Анонимный">
            <div class="btn-wrapper">
                <button type="button" onclick="getName()">Получить</button>
                <button type="button" onclick="setName()">Установить</button>
            </div>
        </div>
        <div class="wrapper message-wrapper">
            <label for="wrapper message">Текст</label>
            <textarea id="message"></textarea>
            <button type="button" onclick="sendMessage()">Отправить</button>
        </div>
        @if (Context.User.IsInRole("client"))
        {
            <div id="ratingDiv" hidden>
                <form method="post">
                    <input type="hidden" id="idStudent" name="idStudent" value="">
                    <select name="rating">
                        <option disabled>Оцените студента</option>
                        @for (int i = 0; i <= 10; i++)
                        {
                            <option value="@i">Оценка = @i</option>
                        }
                    </select>
                    <button type="submit" asp-action="Estimate" asp-controller="Chat">Оценить</button>
                </form>
            </div>
        }
        else if (Context.User.IsInRole("student"))
        {
            <div id="ratingDiv" hidden>
                <form method="post">
                    <input type="hidden" id="idStudent" name="idClient" value="">
                    <button type="submit" asp-action="StopChatByStudent" asp-controller="Chat">На главную</button>
                </form>
            </div>
        }
    </div>
    <div class="messages-wrapper">
        <div id="messages-content">

        </div>
    </div>

</section>

<style>
    p {
        margin-bottom: 0;
    }

    .chat {
        display: flex;
        justify-content: space-between;
    }

    .form-wrapper {
        width: 30%;
    }

        .form-wrapper .wrapper {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            justify-content: space-between;
        }

    .login-wrapper, .message-wrapper {
        flex-wrap: wrap;
    }

    .btn-wrapper {
        width: 100%;
        padding-top: 15px;
    }

        .btn-wrapper button {
            float: right;
            width: 30%;
            justify-content: flex-end;
        }

            .btn-wrapper button:last-child {
                margin-right: 10px;
            }

    .message-wrapper {
        align-items: flex-start;
    }

        .message-wrapper label {
            margin-right: 15px;
            width: 10%;
        }

        .message-wrapper textarea {
            width: 80%;
        }

        .message-wrapper button {
            margin-left: auto;
            margin-top: 15px;
        }

    .messages-wrapper {
        width: 65%;
        display: block;
    }

        .messages-wrapper #messages-content {
            border: 1px solid #000;
            min-height: 500px;
        }
</style>

<script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
<script type="text/javascript">
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:5001/startconsult")
        .withAutomaticReconnect()
        .build();

    connection.on('Send', (message) => {
        appendMessage(message.sender, message.text, 'black');
    });

    connection.on('StopChat', () => {
        stopChat();
    });

    connection.onclose(error => {
        appendMessage('Внимание', 'Консультация закончена', 'red');
        console.log('Connection closed. ', error)
    });

    connection.onreconnecting(error => {
        console.log('Connection reconnecting. ', error);
    });

    connection.onreconnected(connectionId => {
        console.log('Connectin reconnected with id: ', connectionId);
    });

    function appendMessage(sender, message, color) {
        document.querySelector('#messages-content').insertAdjacentHTML("beforeend", `<div style="color:${color}"><p>Отправитель: ${sender}</p><p>Сообщение: ${message}</p></div><br>`);
    }

    async function connect() {
        if (connection.state === 'Disconnected') {
            try {
                await connection.start();
            }
            catch (error) {
                console.log(error);
            }
            if (connection.state === 'Connected') {
                document.querySelector('#conState').textContent = 'Установлено';
                document.querySelector('#conState').style.color = 'green';
                document.querySelector('#connectButton').textContent = 'Разъединить';
            }
        } else if (connection.state === 'Connected') {
            await connection.stop();
            document.querySelector('#conState').textContent = 'Не установлено';
            document.querySelector('#conState').style.color = 'red';
            document.querySelector('#connectButton').textContent = 'Соединить';
            showRating();
        }
    };

    async function sendMessage() {
        if (connection.state === 'Connected') {
            let textArea = document.querySelector('#message');

            let params = new URLSearchParams(window.location.search);
            let idUser;
            if (params.has('idStudent')) {
                idUser = params.get('idStudent');
            } else if (params.has('idClient')) {
                idUser = params.get('idClient');
            } else if (params.has('idUser')) {
                idUser = params.get('idUser');
            }

            let message = { text: textArea.value, id: idUser };
            try {
                await connection.send('SendTo', message);
                appendMessage('Я', message.text, 'green');
            }
            catch (error) {
                console.log(error);
            }
            document.querySelector('#message').value = '';
        }
    }

    async function getName() {
        if (connection.state === 'Connected') {
            try {
                let myName = await connection.invoke('GetName');
                document.querySelector('#name').value = myName;
            }
            catch (error) {
                console.log(error);
            }
        }
    }


    async function setName() {
        if (connection.state === 'Connected') {
            try {
                let name = document.querySelector('#name').value;
                await connection.send('SetName', name);
            }
            catch (error) {
                console.log(error);
            }
        }
    }

    function stopChat() {
        window.alert("Чат окончен. Собеседник остановил чат. Переход на главную страницу сайта.");
        window.location.href = "/";
    }
</script>

<script src="https://code.jquery.com/jquery-3.5.1.js"
        integrity="sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc="
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" integrity="sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s" crossorigin="anonymous"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>

@if (Context.User.IsInRole("client"))
{
    <script>
        function showRating() {
            let urlParams = new URLSearchParams(window.location.search);
            let idStud;
            if (urlParams.has('idStudent')) {
                idStud = urlParams.get('idStudent');
            } else if (urlParams.has('idUser')) {
                idStud = urlParams.get('idUser');
            }
            $("#ratingDiv").removeAttr('hidden');
            $("#idStudent").val(idStud);
        }
    </script>
}
else if (Context.User.IsInRole("student"))
{
    <script>
        function showRating() {
            let urlParams = new URLSearchParams(window.location.search);
            let idStud;
            if (urlParams.has('idClient')) {
                idStud = urlParams.get('idClient');
            } else if (urlParams.has('idUser')) {
                idStud = urlParams.get('idUser');
            }
            $("#ratingDiv").removeAttr('hidden');
            $("#idStudent").val(idStud);
        }
    </script>
}